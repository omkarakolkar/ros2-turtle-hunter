#!/usr/bin/env python3
import rclpy
import math
from functools import partial
from rclpy.node import Node
from my_robot_interfaces.msg import Turtle
from my_robot_interfaces.msg import TurtleArray
from my_robot_interfaces.srv import CatchTurtle
from turtlesim.msg import Pose                    #way to find the find the packages [ros2 run topic list] >>> choose a topic
from geometry_msgs.msg import Twist                # run [ros2 run topic info (choose_topic)] >>> ros2 topic info /turtle1/cmd_vel
                                                        # Type: geometry_msgs/msg/Twist (which is what we need)
                                                        # Publisher count: 1
                                                        # Subscription count: 2
                                                    #add to package.xml as dependency
                                                    
 
 
class TurtleController(Node): 
    def __init__(self):
        super().__init__("turtle_controller") 
        self.declare_parameter("catch_closest_turtle_first", True)
        self.catch_closest_turtle_first_ = self.get_parameter(
            "catch_closest_turtle_first").value
        self.turtle_to_catch_: Turtle = None
        
        self.pose_ : Pose = None     
        self.cmd_vel_publisher = self.create_publisher(         #publisher for cmd_vel for controlling the turtle 
            Twist,
            "/turtle1/cmd_vel", 10
        )                  
        self.pose_subscriber = self.create_subscription(          # subsriber for the position of main turtle  # and storing it in the self.pose || as position coordinates are generated by turtlesim node itself we use subscriber to recieve its data 
            Pose,                                                 
            '/turtle1/pose',
            self.pose_callback, 10
        )
        self.alive_turtles_subscriber_ = self.create_subscription(          #alive turtles list subscriber 
            TurtleArray, "alive_turtles", self.callback_alive_turtles, 10
        )
        self.catch_turtle_client_ = self.create_client(
            CatchTurtle, "catch_turtle"
        )
        self.control_loop_timer = self.create_timer(
            0.01, self.control_loop
        )

    def pose_callback(self, pose: Pose):
        self.pose_ = pose

    def callback_alive_turtles(self, msg: TurtleArray): 
        if len(msg.turtles) > 0:
            if self.catch_closest_turtle_first_:
                closest_turtle = None
                closest_turtle_distance = None

                for turtle in msg.turtles:
                    dist_x = turtle.x - self.pose_.x
                    dist_y = turtle.y - self.pose_.y
                    distance = math.sqrt(dist_x*dist_x + dist_y*dist_y)
                    if closest_turtle == None or distance < closest_turtle_distance:
                        closest_turtle = turtle
                        closest_turtle_distance = distance
                self.turtle_to_catch_ = closest_turtle 
            else:
                self.turtle_to_catch_ = msg.turtles[0]
        else:
            self.turtle_to_catch_ = None
        # if len(msg.turtles) > 0:
        #     self.turtle_to_catch_ = msg.turtles[0]

    def control_loop(self):                     # this controll loop is to limit the speed of the turtle because the it publishes at 60hz. which is not visual. so we subscribe to the timer 
        if self.pose_ == None or self.turtle_to_catch_ == None:                  #to avoid error just
            return
        
        dist_x = self.turtle_to_catch_.x - self.pose_.x                   #pythagorus to find distance between turtle (self.pose_.x/y) and target
        dist_y = self.turtle_to_catch_.y - self.pose_.y
        distance = math.sqrt(dist_x*dist_x + dist_y*dist_y)

        cmd = Twist()

        if distance > 0.5:                      # this condition is to check if turtle is reached near the object. if we try to take the turtle to exact location then iit would take indifinite time 
            #position
            cmd.linear.x = 1*distance           # x velocity proportional to distance (2 trial and error parameter)

            #orientation
            goal_theta = math.atan2(dist_y, dist_x)
            diff = goal_theta - self.pose_.theta
            if diff > math.pi:                      # for normalisation of angle difference
                diff -= 2*math.pi
            elif diff < -math.pi:
                diff += 2*math.pi

            cmd.angular.z = 3*diff              #rotation proportional tto distance (6 is just trial and error parameter)
        else:
            #target reached 
            cmd.linear.x = 0.0                   # we are using linear x and angular z because the turtle should only move in 2d space. 
            cmd.angular.z = 0.0
            self.call_catch_turtle_service(self.turtle_to_catch_.name)
            self.turtle_to_catch_ = None

        self.cmd_vel_publisher.publish(cmd)

    def call_catch_turtle_service(self, turtle_name):
        while not self.catch_turtle_client_.wait_for_service(0.1):
            self.get_logger().warn("waiting for catch service ...")

        request = CatchTurtle.Request()
        request.name = turtle_name

        future = self.catch_turtle_client_.call_async(request)
        future.add_done_callback(
            partial(self.callback_call_catch_turtle_service, turtle_name=turtle_name))
        
    def callback_call_catch_turtle_service(self, future, turtle_name):
        response: CatchTurtle.Response = future.result()
        if not response.success:
            self.get_logger().error("Turtle" + turtle_name + "could not ber removed")

 
 
def main(args=None):
    rclpy.init(args=args)
    node = TurtleController() 
    rclpy.spin(node)
    rclpy.shutdown()
 
 
if __name__ == "__main__":
    main()